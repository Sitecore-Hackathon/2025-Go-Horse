---
ID: "9701b6fd-a9a7-4b82-9e2b-6b1219a7a76f"
Parent: "8deeed76-cf5d-4a62-895e-bebb81ba0227"
Template: "dd22f1b3-bd87-4db2-9e7d-f7a496888d43"
Path: /sitecore/system/Modules/PowerShell/Script Library/Sitecore Flow/Sitecore Flow/Content Editor/Ribbon/Analyze/Sitecore Flow/Process all changes
SharedFields:
- ID: "06d5295c-ed2f-4a54-9bf2-26228d113318"
  Hint: __Icon
  Value: /~/icon/applications/32x32/gear_run.png
- ID: "1c76313e-3c8c-4807-a826-135d10c39299"
  Hint: ShowRule
  Value: |
    <ruleset>
      <rule
        uid="{E89B9F21-CFC5-4D2D-AD1E-2D646CC288C6}">
        <conditions>
          <condition
            id="{5DE6D53E-EA62-4D17-8BDD-FEBCD80AC07B}"
            uid="2F749E5EA8AD4B0286F8497B80C353E0"
            templateid="{F5C68DC5-CD57-41CE-B241-98DF18BE8994}" />
        </conditions>
      </rule>
    </ruleset>
- ID: "b1a94ff0-6897-47c0-9c51-aa6acb80b1f0"
  Hint: Script
  Value: |
    Import-Function -Name Functions -Module "Sitecore Flow"
    
    $assistantItem = $SitecoreContextItem
    
    ### Load Settings
    Import-Function -Name LoadSettings
    
    ### Loop on the uploaded documents
    $documents = $assistantItem.Children | Where-Object { $_.TemplateID -eq $SitecoreFlow_Document_TemplateID }
    $documents = @($documents)
    function Invoke-ChatGptExtraction($plainText, $apiKey) {
        $headers = @{
            "Authorization" = "Bearer $apiKey"
            "Content-Type"  = "application/json"
        }
    
        # Remove special characters from plainText
        $cleanPlainText = $plainText -replace '[^\w\s.,-]', ''
    
        $prompt = @"
    Extract the following information from the text below as JSON:
    {
        "Brand Purpose": "",
        "Brand History": "",
        "Brand Benefits": "",
        "Brand Context": "",
        "Brand Beliefs and Benefits": "",
        "Tone of Voice": "",
        "Visual guidance": "",
        "Image Style": ""
    }
    
    Text:
    $cleanPlainText
    "@
    
        $body = @{
            model = "gpt-3.5-turbo"
            messages = @(
                @{
                    role = "user"
                    content = $prompt
                }
            )
            temperature = 0
        } | ConvertTo-Json -Depth 4 -Compress
    
        try {
            $response = Invoke-RestMethod -Uri "https://api.openai.com/v1/chat/completions" -Headers $headers -Method Post -Body $body
            return ($response.choices[0].message.content | ConvertFrom-Json)
        }
        catch {
            Write-Host "Error calling ChatGPT API: $_"
            return $null
        }
    }
    
    function Save-ExtractedContentToSitecore($item, $content) {
        $item.Editing.BeginEdit()
        try {
            $item["Brand Purpose"]              = $content."Brand Purpose"
            $item["Brand History"]              = $content."Brand History"
            $item["Brand Benefits"]             = $content."Brand Benefits"
            $item["Brand Context"]              = $content."Brand Context"
            $item["Brand Beliefs and Benefits"] = $content."Brand Beliefs and Benefits"
            $item["Tone of Voice"]              = $content."Tone of Voice"
            $item["Visual guidance"]            = $content."Visual guidance"
            $item["Image Style"]                = $content."Image Style"
            Write-Host "Item updated successfully: $($item.Paths.FullPath)"
        }
        catch {
            Write-Host "Error updating item $($item.Paths.FullPath): $_"
        }
        finally {
            $item.Editing.EndEdit()
        }
    }
    
    
    function Get-PlainTextFromPdf() {
        param( 
            [System.IO.Stream]$mediaStream,
            [string]$fileName
        )
    
        try {
    
            # Dynamically resolve itextsharp.dll path
            $kernel = [Sitecore.Configuration.Settings]::GetSetting("LicenseFile")
            $sitecoreWebRoot = [System.IO.Path]::GetDirectoryName($kernel)
            $dllPath = Join-Path $sitecoreWebRoot "bin\itextsharp.dll"
    
    
            # Copy the PDF stream to a temporary file to avoid memory stream issues
            $tempFilePath = [System.IO.Path]::Combine([System.IO.Path]::GetTempPath(), $fileName)
            $tempFile = [System.IO.File]::Create($tempFilePath)
            $mediaStream.CopyTo($tempFile)
            $tempFile.Close()
    
            $pdf = New-Object iTextSharp.text.pdf.pdfreader -ArgumentList $tempFilePath
            
            # Initialize the $plainText variable before usage
            $plainText = New-Object System.Text.StringBuilder
            
        	for ($page = 1; $page -le $pdf.NumberOfPages; $page++){
    	    	$text=[iTextSharp.text.pdf.parser.PdfTextExtractor]::GetTextFromPage($pdf,$page)
    	  	    [void]$plainText.AppendLine($text)
    	    }	
    	   
    	    $pdf.Close()
    	    
    	    # Optionally remove the temporary file after extraction
            Remove-Item -Path $tempFilePath -Force
           
            Write-Host  $plainText.ToString()
        return $plainText.ToString()
           
        }
        catch {
            Write-Host "Error extracting text from PDF: $_"
            if ($_.Exception.InnerException) {
                Write-Host "Inner Exception Details: $($_.Exception.InnerException.Message)"
            }
            return $null
        }
    }
    
    
    
    foreach ($docItem in $documents) {
        
        ### Get document to be processed
        $documentPath = Get-FieldValue $docItem $SitecoreFlow_Document_Document_FieldName $null
        $mediaItem = Get-Item -Path "master:$documentPath"
        
        if (Test-BaseTemplate -Item $mediaItem -Template $SitecoreFlow_MediaFile_TemplateID) {
            # Get the media stream
            $mediaItem = [Sitecore.Data.Items.MediaItem]$mediaItem
            $media = [Sitecore.Resources.Media.MediaManager]::GetMedia($mediaItem)
            $mediaStream = $media.GetStream().Stream
            
            #Extract plain text form PDF
            $plainText = Get-PlainTextFromPdf $mediaStream "$($mediaItem.Name).$($mediaItem.Extension)"
        
            ### Get Plain Text from document and save on the document item
    
            #Starting editing the file to save the extracted text
             if ($plainText -and $plainText.Trim() -ne "") {
                # Start editing the item to save the extracted text
                $docItem.Editing.BeginEdit()
                try {
                    $docItem["Plain Text"] = $plainText
                    Write-Host "Plain Text updated successfully for item: $($docItem.Paths.FullPath)"
                }
                catch {
                    Write-Host "Error updating item $($docItem.Paths.FullPath): $_"
                }
                finally {
                    $docItem.Editing.EndEdit()
                }
                
                # Call ChatGPT function to extract specific information
                # Retrieve API Key from Sitecore Item
                $settingsItem = Get-Item -Path "master:{5AABD3AF-E072-4E16-8782-1934B0B56EF4}"
                $apiKey = $settingsItem["API Key"]
                $model =  $settingsItem["Model"]
    
                $chatGptContent = Invoke-ChatGptExtraction -plainText $plainText -apiKey $apiKey
    
                if ($chatGptContent) {
                    # Save extracted fields to Assistant item
                    Save-ExtractedContentToSitecore -item $assistantItem -content $chatGptContent
                }
                
            }
            else {
                Write-Host "No plain text extracted for item: $($docItem.Paths.FullPath)"
            }
            
        }    
    
        
        
        ### Get Information from document and save on the Assistant item    
    }
    
    Close-Window
Languages:
- Language: en
  Versions:
  - Version: 1
    Fields:
    - ID: "25bed78c-4957-4165-998a-ca1b52f67497"
      Hint: __Created
      Value: 20250308T050341Z
    - ID: "52807595-0f8f-4b20-8d2a-cb71d28c6103"
      Hint: __Owner
      Value: |
        sitecore\rpeplau
    - ID: "5dd74568-4d4b-44c1-b513-0af5f4cda34f"
      Hint: __Created by
      Value: |
        sitecore\rpeplau
    - ID: "8cdc337e-a112-42fb-bbb4-4143751e123f"
      Hint: __Revision
      Value: "93ba6b11-49c3-4d2e-a758-d5324cd608d9"
    - ID: "badd9cf9-53e0-4d0c-bcc0-2d784c282f6a"
      Hint: __Updated by
      Value: |
        sitecore\jneto
    - ID: "d9cf14b1-fa16-4ba6-9288-e8a174d4d522"
      Hint: __Updated
      Value: 20250308T123149Z
